39764.51+8327.65
39764+8327
39764+8327+3033
t =table(mtcars$cyl, mtcars$hp)
t =table(mtcars$cyl, mtcars$gear)
t
knitr::kable(t)
as.data.frame.matrix(t)
base = read.csv("../Downloads/base_atp.csv")
base = read.csv("../Downloads/base_atp.csv", sep = ";")
head(base)
library(tidyverse)
base = read_csv("../Downloads/base_atp.csv", sep = ";")
base = read_csv("../Downloads/base_atp.csv")
base = read_delim("../Downloads/base_atp.csv", delim = ";")
base$Date2 = dmy(base$Date)
library(lubridate)
base$Date2 = dmy(base$Date)
base$annee = year(base$Date2)
base$compt = 1
table = table(base$annee,base$compt)
tableau2 = as.data.frame(table(base$annee))
graph1 = plot(x=tableau2[,1],y=tableau2[,2],type = "l", las = 1, xlab = "Annee", ylab = "Nombre de matchs",main="Evolution du nombre de matchs par année")
tableau2
str(tableau2)
graph1 = plot(x=as.numeric(tableau2[,1]),y=tableau2[,2],type = "l", las = 1, xlab = "Annee", ylab = "Nombre de matchs",main="Evolution du nombre de matchs par année")
?colorBin
??colorBin
??htmlEscape
??icon
??makeAwesomeIcon
??pdf_toc
library(pdftools)
??pdf_toc
?pdf_toc
R.version.string
3 * 365 * 80e09
3 * 365 * 80e09 / 5
3 * * 80e09 / 5
3 * 80e09 / 5
4*8
2**32
8*8
2**64
3 * 365 * 80e09 / 5 * 8 * 8
3 * 365 * 80e09 / 5 * 8 * 8 / 1024
3 * 365 * 80e09 / 5 * 8 * 8 / 1024 / 1024
3 * 365 * 80e09 / 5 * 8 * 8 / 1024 / 1024 / 1024
3 * 365 * 80e09 / 5 * 8 * 8 / 1024 / 1024 / 1024 / 1024
3 * 365 * 80e09 / 5 * 8 * 8 / 1024 / 1024 / 1024 / 1024 / 1024
3 * 365 * 80e09 / 5 * 8 * 8  / 4
3 * 80e09 / 5 * 8 * 8
3 * 80e09 / 5
3 * 80e09 / 5 * 8 * 8
??netcdf
install.packages("ncdf")
install.packages("RNetCDF")
library(RNetCDF)
getwd()
don = read.nc("../Downloads/gistemp1200_GHCNv4_ERSSTv5.nc/gistemp1200_GHCNv4_ERSSTv5.nc")
don = open.nc("../Downloads/gistemp1200_GHCNv4_ERSSTv5.nc/gistemp1200_GHCNv4_ERSSTv5.nc")
don
file.inq.nc(don)
nc = don
ndims <- file.inq.nc(nc)$ndims
dimnames <- character(ndims)
for(i in seq_len(ndims)) {
dimnames[i] <- dim.inq.nc(nc, i-1)$name
}
dimnames
nc_data <- read.nc(nc)
nc_data$time
nc_data$time_bnds
nc_data$time
time_units <- att.get.nc(nc, "time", "units")
time_units
range(nc_data$time)
as.Date("1800-01-01") + range(nc_data$time)
nc_data$tempanomaly
is.na(nc_data$tempanomaly)
sum(is.na(nc_data$tempanomaly))
dim(nc_data$tempanomaly)
180*90*1676
sum(is.na(nc_data$tempanomaly))/180*90*1676
sum(is.na(nc_data$tempanomaly))/(180*90*1676)
library(tidyverse)
library(lubridate)
base = read_delim("../Downloads/base_atp.csv", delim = ";")
library(jsonlite)
data = fromJSON("../Downloads/query__earthquakes.json")
View(data)
data
names(data)
names(data$features)
head(data$features)
library(leaflet)
m <- leaflet() %>%
addTiles()
m
m <- leaflet(data) %>%
addTiles() %>%
addCircles()
m <- leaflet(data$features) %>%
addTiles() %>%
addCircles()
names(data$features)
names(data$features$properties)
data = geojsonio::geojson_read("../Downloads/query__earthquakes.json",
what = "sp")
library(leaflet)
m <- leaflet(data$features) %>%
addTiles() %>%
addCircles()
data = geojsonio::geojson_read("../Downloads/query__earthquakes.json")
data = geojsonio::geojson_read("../Downloads/query__earthquakes.json",
what = "sp")
data = rgdal::readOGR("../Downloads/query__earthquakes.json",
"OGRGeoJSON")
names(data$features$properties)
m <- leaflet(data$features$properties) %>%
addTiles() %>%
addCircles()
head(data$features)
data$features %>%
transmute(lon = geometry$coordinates[1])
data$features %>%
transmute(lon = geometry$coordinates[,1])
data$features %>%
transmute(lon = geometry$coordinates)
data$features$geometry$coordinates
data$features$geometry$type
data$features$geometry$coordinates
data$features$geometry$coordinates[[1]]
length(data$features$geometry$coordinates[[1]])
data$features$geometry$coordinates[[1]][1]
sapply(data$features$geometry$coordinates[[1]], function(e) e[1])
sapply(data$features$geometry$coordinates, function(e) e[1])
lon = sapply(data$features$geometry$coordinates, function(e) e[1])
lat = sapply(data$features$geometry$coordinates, function(e) e[2])
names(data$features$properties)
mag = data$features$properties$mag
m <- leaflet(data.frame(lat = lat, lon = lon, mag = mag)) %>%
addTiles() %>%
addCircles(fillColor = ~pal(mag))
pal <- colorNumeric("viridis", NULL)
m <- leaflet(data.frame(lat = lat, lon = lon, mag = mag)) %>%
addTiles() %>%
addCircles(fillColor = ~pal(mag))
m
m <- leaflet(data.frame(lat = lat, lon = lon, mag = mag)) %>%
addTiles() %>%
addCircles(color = ~pal(mag))
m
addLegend(pal = pal, values = ~mag)
m <- leaflet(data.frame(lat = lat, lon = lon, mag = mag)) %>%
addTiles() %>%
addCircles(color = ~pal(mag)) %>%
addLegend(pal = pal, values = ~mag)
m
mag
summary(mag)
library(RSQLite)
install.packages("RSQLite")
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), ":memory:")
dbListTables(con)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), ":memory:")
RSQLite::SQLite()
# Create an ephemeral in-memory RSQLite database
con = dbConnect(RSQLite::SQLite(), ":memory:")
dbConnect()
# Create an ephemeral in-memory RSQLite database
con = dbConnect(RSQLite::SQLite(), "../Documents/GitHub/donnees/Chinook/Chinook_Sqlite.sqlite")
install.packages("DBI")
install.packages("DBI")
library(DBI)
# Create an ephemeral in-memory RSQLite database
con = dbConnect(RSQLite::SQLite(), "../Documents/GitHub/donnees/Chinook/Chinook_Sqlite.sqlite")
library(RSQLite)
R.version.string
library(installr)
updateR()
library(DBI)
# Create an ephemeral in-memory RSQLite database
con = dbConnect(RSQLite::SQLite(), "../Documents/GitHub/donnees/Chinook/Chinook_Sqlite.sqlite")
dbListTables(con)
library(RSQLite)
# Create an ephemeral in-memory RSQLite database
con = dbConnect(SQLite(), "../Documents/GitHub/donnees/Chinook/Chinook_Sqlite.sqlite")
# Create an ephemeral in-memory RSQLite database
con = dbConnect(SQLite(), "../Documents/GitHub/donnees/Comptoir2000/Comptoir2000.sqlite")
setwd("~/GitHub/donnees/Comptoir2000")
# Create an ephemeral in-memory RSQLite database
con = dbConnect(SQLite(), "Comptoir2000.sqlite")
file.exists("Comptoir2000.sqlite")
getwd()
